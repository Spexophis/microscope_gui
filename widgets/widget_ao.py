from PyQt5 import QtWidgets, QtCore

from utilities import customized_widgets as cw


class AOWidget(QtWidgets.QWidget):
    Signal_shwfs_initiate = QtCore.pyqtSignal()
    Signal_shwfs_computewf = QtCore.pyqtSignal()
    Signal_shwfs_correctwf = QtCore.pyqtSignal()
    Signal_shwfs_savewf = QtCore.pyqtSignal()
    Signal_wfs_start = QtCore.pyqtSignal()
    Signal_wfs_stop = QtCore.pyqtSignal()
    Signal_shwfs_run = QtCore.pyqtSignal()
    Signal_push_actuator = QtCore.pyqtSignal()
    Signal_influence_function = QtCore.pyqtSignal()
    Signal_set_zernike = QtCore.pyqtSignal()
    Signal_set_dm = QtCore.pyqtSignal()
    Signal_update_cmd = QtCore.pyqtSignal()
    Signal_load_dm = QtCore.pyqtSignal(str)
    Signal_save_dm = QtCore.pyqtSignal()
    Signal_sensorlessAO_run = QtCore.pyqtSignal()
    Signal_sensorlessAO_save = QtCore.pyqtSignal()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        layout = QtWidgets.QVBoxLayout(self)
        dock_image, group_image = cw.create_dock('SH Image')
        dock_parameters, group_parameters = cw.create_dock('SH Parameters')
        dock_commands, group_commands = cw.create_dock('Wavefront Sensor')
        dock_deformablemirror, group_deformablemirror = cw.create_dock('Deformable Mirror')
        dock_dwfs, group_dwfs = cw.create_dock('Wavefront Sensing AO')
        dock_sensorlessao, group_sensorlessao = cw.create_dock('Sensorless AO')
        dock_file, group_file = cw.create_dock('File')
        layout.addWidget(dock_image)
        layout.addWidget(dock_parameters)
        layout.addWidget(dock_commands)
        layout.addWidget(dock_deformablemirror)
        layout.addWidget(dock_dwfs)
        layout.addWidget(dock_sensorlessao)
        layout.addWidget(dock_file)
        self.setLayout(layout)

        layout_image = QtWidgets.QGridLayout()
        self.QLabel_wfmax = cw.label_widget(str('Wavefront MAX'))
        self.lcdNumber_wfmax = cw.lcdnumber_widget()
        self.QLabel_wfmin = cw.label_widget(str('Wavefront MIN'))
        self.lcdNumber_wfmin = cw.lcdnumber_widget()
        self.QLabel_wfrms = cw.label_widget(str('Wavefront RMS'))
        self.lcdNumber_wfrms = cw.lcdnumber_widget()
        layout_image.addWidget(self.QLabel_wfmin, 0, 0, 1, 1)
        layout_image.addWidget(self.lcdNumber_wfmin, 1, 0, 1, 1)
        layout_image.addWidget(self.QLabel_wfmax, 0, 1, 1, 1)
        layout_image.addWidget(self.lcdNumber_wfmax, 1, 1, 1, 1)
        layout_image.addWidget(self.QLabel_wfrms, 0, 2, 1, 1)
        layout_image.addWidget(self.lcdNumber_wfrms, 1, 2, 1, 1)
        group_image.setLayout(layout_image)

        layout_parameters = QtWidgets.QGridLayout()
        self.QLabel_base_xcenter = cw.label_widget(str('X_center (Base)'))
        self.QSpinBox_base_xcenter = cw.spinbox_widget(0, 2048, 1, 1024)
        self.QLabel_base_ycenter = cw.label_widget(str('Y_center (Base)'))
        self.QSpinBox_base_ycenter = cw.spinbox_widget(0, 2048, 1, 1024)
        self.QLabel_offset_xcenter = cw.label_widget(str('X_center (Offset)'))
        self.QSpinBox_offset_xcenter = cw.spinbox_widget(0, 2048, 1, 1024)
        self.QLabel_offset_ycenter = cw.label_widget(str('Y_center (Offset)'))
        self.QSpinBox_offset_ycenter = cw.spinbox_widget(0, 2048, 1, 1024)
        self.QLabel_n_lenslets_x = cw.label_widget(str('Lenslet X'))
        self.QSpinBox_n_lenslets_x = cw.spinbox_widget(0, 64, 1, 14)
        self.QLabel_n_lenslets_y = cw.label_widget(str('Lenslet Y'))
        self.QSpinBox_n_lenslets_y = cw.spinbox_widget(0, 64, 1, 14)
        self.QLabel_spacing = cw.label_widget(str('Spacing'))
        self.QSpinBox_spacing = cw.spinbox_widget(0, 64, 1, 26)
        self.QLabel_radius = cw.label_widget(str('Radius'))
        self.QSpinBox_radius = cw.spinbox_widget(0, 64, 1, 12)
        self.QLabel_wfrmd = cw.label_widget(str('Method'))
        self.QComboBox_wfrmd = cw.combobox_widget(list_items=['correlation', 'centerofmass'])
        layout_parameters.addWidget(self.QLabel_wfrmd, 0, 0, 1, 1)
        layout_parameters.addWidget(self.QComboBox_wfrmd, 0, 1, 1, 2)
        layout_parameters.addWidget(self.QLabel_base_xcenter, 1, 0, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_base_xcenter, 1, 1, 1, 1)
        layout_parameters.addWidget(self.QLabel_base_ycenter, 2, 0, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_base_ycenter, 2, 1, 1, 1)
        layout_parameters.addWidget(self.QLabel_offset_xcenter, 1, 2, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_offset_xcenter, 1, 3, 1, 1)
        layout_parameters.addWidget(self.QLabel_offset_ycenter, 2, 2, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_offset_ycenter, 2, 3, 1, 1)
        layout_parameters.addWidget(self.QLabel_n_lenslets_x, 4, 0, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_n_lenslets_x, 5, 0, 1, 1)
        layout_parameters.addWidget(self.QLabel_n_lenslets_y, 4, 1, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_n_lenslets_y, 5, 1, 1, 1)
        layout_parameters.addWidget(self.QLabel_spacing, 4, 2, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_spacing, 5, 2, 1, 1)
        layout_parameters.addWidget(self.QLabel_radius, 4, 3, 1, 1)
        layout_parameters.addWidget(self.QSpinBox_radius, 5, 3, 1, 1)
        group_parameters.setLayout(layout_parameters)

        layout_shwfs = QtWidgets.QGridLayout()
        self.QPushButton_shwfs_base = cw.pushbutton_widget('SetBase', enable=False)
        self.QPushButton_run_wfs = cw.pushbutton_widget('RunWFS', checkable=True)
        self.QPushButton_run_wfr = cw.pushbutton_widget('RunWFR', enable=False)
        self.QPushButton_shwfs_compute_wf = cw.pushbutton_widget('ComputeWF', enable=False)
        self.QPushButton_shwfs_save_wf = cw.pushbutton_widget('SaveWF', enable=False)
        self.radioButton_exclude_zm = cw.radiobutton_widget("Exclude", f"rgb(220, 20, 60)")
        layout_shwfs.addWidget(self.QPushButton_shwfs_base, 0, 1, 1, 1)
        layout_shwfs.addWidget(self.QPushButton_run_wfs, 0, 0, 1, 1)
        layout_shwfs.addWidget(self.QPushButton_run_wfr, 0, 2, 1, 1)
        layout_shwfs.addWidget(self.radioButton_exclude_zm, 2, 0, 1, 1)
        layout_shwfs.addWidget(self.QPushButton_shwfs_compute_wf, 2, 1, 1, 1)
        layout_shwfs.addWidget(self.QPushButton_shwfs_save_wf, 2, 2, 1, 1)
        group_commands.setLayout(layout_shwfs)

        layout_deformablemirror = QtWidgets.QGridLayout()
        self.QLabel_wfsmd = cw.label_widget(str('Method'))
        self.QComboBox_wfsmd = cw.combobox_widget(list_items=['wavefront', 'zonal', 'modal'])
        self.QLabel_actuator = cw.label_widget(str('Actuator'))
        self.QSpinBox_actuator = cw.spinbox_widget(0, 96, 1, 0)
        self.QLabel_actuator_push = cw.label_widget(str('Push'))
        self.QDoubleSpinBox_actuator_push = cw.doublespinbox_widget(-1, 1, 0.005, 3, 0)
        self.QPushButton_push_actuator = cw.pushbutton_widget('Push')
        self.QPushButton_influence_fuction_laser = cw.pushbutton_widget('InfluFunc')
        self.QLabel_zernike_mode = cw.label_widget(str('Zernike Mode'))
        self.QSpinBox_zernike_mode = cw.spinbox_widget(0, 100, 1, 0)
        self.QLabel_zernike_mode_amp = cw.label_widget(str('Amplitude'))
        self.QDoubleSpinBox_zernike_mode_amp = cw.doublespinbox_widget(-20, 20, 0.01, 2, 0)
        self.QPushButton_set_zernike_mode = cw.pushbutton_widget('Set Zernike')
        self.QComboBox_cmd = cw.combobox_widget(list_items=['0', '1'])
        self.QComboBox_cmd.setCurrentIndex(1)
        self.QPushButton_setDM = cw.pushbutton_widget('Set DM')
        self.QPushButton_loadDM = cw.pushbutton_widget('Load DM')
        self.QPushButton_update_cmd = cw.pushbutton_widget('Add DM')
        self.QPushButton_save_dm = cw.pushbutton_widget('Save DM')
        layout_deformablemirror.addWidget(self.QLabel_wfsmd, 0, 0, 1, 1)
        layout_deformablemirror.addWidget(self.QComboBox_wfsmd, 0, 1, 1, 1)
        layout_deformablemirror.addWidget(self.QLabel_actuator, 1, 0, 1, 1)
        layout_deformablemirror.addWidget(self.QSpinBox_actuator, 1, 1, 1, 1)
        layout_deformablemirror.addWidget(self.QLabel_actuator_push, 2, 0, 1, 1)
        layout_deformablemirror.addWidget(self.QDoubleSpinBox_actuator_push, 2, 1, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_push_actuator, 3, 0, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_influence_fuction_laser, 3, 1, 1, 1)
        layout_deformablemirror.addWidget(self.QLabel_zernike_mode, 1, 2, 1, 1)
        layout_deformablemirror.addWidget(self.QSpinBox_zernike_mode, 1, 3, 1, 1)
        layout_deformablemirror.addWidget(self.QLabel_zernike_mode_amp, 2, 2, 1, 1)
        layout_deformablemirror.addWidget(self.QDoubleSpinBox_zernike_mode_amp, 2, 3, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_set_zernike_mode, 3, 2, 1, 1)
        layout_deformablemirror.addWidget(self.QComboBox_cmd, 4, 0, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_setDM, 4, 1, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_loadDM, 3, 3, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_update_cmd, 4, 2, 1, 1)
        layout_deformablemirror.addWidget(self.QPushButton_save_dm, 4, 3, 1, 1)
        group_deformablemirror.setLayout(layout_deformablemirror)

        layout_dwfs = QtWidgets.QGridLayout()
        self.QPushButton_dwfs_correction = cw.pushbutton_widget('WF Correction')
        layout_dwfs.addWidget(self.QPushButton_dwfs_correction, 0, 0, 1, 1)
        group_dwfs.setLayout(layout_dwfs)

        layout_sensorless = QtWidgets.QGridLayout()
        self.QLabel_zernike_modes = cw.label_widget(str('Zernike Modes'))
        self.QLabel_zernike_mode_start = cw.label_widget(str('From'))
        self.QSpinBox_zernike_mode_start = cw.spinbox_widget(1, 64, 1, 1)
        self.QLabel_zernike_mode_stop = cw.label_widget(str('To'))
        self.QSpinBox_zernike_mode_stop = cw.spinbox_widget(1, 64, 1, 32)
        self.QLabel_zernike_modes_amps = cw.label_widget(str('Amplitudes'))
        self.QLabel_zernike_modes_amps_start = cw.label_widget(str('From'))
        self.QDoubleSpinBox_zernike_mode_amps_start = cw.doublespinbox_widget(-50, 0, 0.01, 2, -1.6)
        self.QLabel_zernike_modes_amps_stepnum = cw.label_widget(str('StepNum'))
        self.QSpinBox_zernike_mode_amps_stepnum = cw.spinbox_widget(0, 50, 2, 5)
        self.QLabel_zernike_modes_amps_step = cw.label_widget(str('StepSize'))
        self.QDoubleSpinBox_zernike_mode_amps_step = cw.doublespinbox_widget(0, 50, 0.01, 2, 1.6)
        self.QLabel_lpf = cw.label_widget(str('LPF'))
        self.QDoubleSpinBox_lpf = cw.doublespinbox_widget(0, 1, 0.05, 2, 0.08)
        self.QLabel_hpf = cw.label_widget(str('HPF'))
        self.QDoubleSpinBox_hpf = cw.doublespinbox_widget(0, 1, 0.05, 2, 0.64)
        self.QLabel_metric_function = cw.label_widget(str('Image Metric'))
        self.QComboBox_metric = cw.combobox_widget(list_items=['SNR(FFT)', 'Max(Intensity)', 'HighPass(FFT)'])
        self.QPushButton_sensorless_run = cw.pushbutton_widget('Run AO')
        self.QPushButton_sensorless_save = cw.pushbutton_widget('Save Results')
        layout_sensorless.addWidget(self.QLabel_zernike_modes, 0, 0, 1, 2)
        layout_sensorless.addWidget(self.QLabel_zernike_mode_start, 1, 0, 1, 1)
        layout_sensorless.addWidget(self.QSpinBox_zernike_mode_start, 1, 1, 1, 1)
        layout_sensorless.addWidget(self.QLabel_zernike_mode_stop, 2, 0, 1, 1)
        layout_sensorless.addWidget(self.QSpinBox_zernike_mode_stop, 2, 1, 1, 1)
        layout_sensorless.addWidget(self.QLabel_zernike_modes_amps, 0, 2, 1, 2)
        layout_sensorless.addWidget(self.QLabel_zernike_modes_amps_start, 1, 2, 1, 1)
        layout_sensorless.addWidget(self.QDoubleSpinBox_zernike_mode_amps_start, 1, 3, 1, 1)
        layout_sensorless.addWidget(self.QLabel_zernike_modes_amps_stepnum, 2, 2, 1, 1)
        layout_sensorless.addWidget(self.QSpinBox_zernike_mode_amps_stepnum, 2, 3, 1, 1)
        layout_sensorless.addWidget(self.QLabel_zernike_modes_amps_step, 3, 2, 1, 1)
        layout_sensorless.addWidget(self.QDoubleSpinBox_zernike_mode_amps_step, 3, 3, 1, 1)
        layout_sensorless.addWidget(self.QLabel_lpf, 0, 4, 1, 1)
        layout_sensorless.addWidget(self.QDoubleSpinBox_lpf, 1, 4, 1, 1)
        layout_sensorless.addWidget(self.QLabel_hpf, 2, 4, 1, 1)
        layout_sensorless.addWidget(self.QDoubleSpinBox_hpf, 3, 4, 1, 1)
        layout_sensorless.addWidget(self.QLabel_metric_function, 0, 5, 1, 1)
        layout_sensorless.addWidget(self.QComboBox_metric, 1, 5, 1, 1)
        layout_sensorless.addWidget(self.QPushButton_sensorless_run, 2, 5, 1, 1)
        layout_sensorless.addWidget(self.QPushButton_sensorless_save, 3, 5, 1, 1)
        group_sensorlessao.setLayout(layout_sensorless)

        layout_File = QtWidgets.QGridLayout()
        self.QLabel_file_name = cw.label_widget(str('File name'))
        self.QLineEdit_filename = cw.lineedit_widget()
        layout_File.addWidget(self.QLabel_file_name, 0, 0, 1, 1)
        layout_File.addWidget(self.QLineEdit_filename, 0, 1, 1, 5)
        group_file.setLayout(layout_File)

        self.QPushButton_shwfs_base.clicked.connect(self.set_wfs_base)
        self.QPushButton_run_wfs.clicked.connect(self.run_wfs)
        self.QPushButton_run_wfr.clicked.connect(self.run_wfr)
        self.QPushButton_shwfs_compute_wf.clicked.connect(self.Signal_shwfs_computewf.emit)
        self.QPushButton_shwfs_save_wf.clicked.connect(self.Signal_shwfs_savewf.emit)
        self.QPushButton_push_actuator.clicked.connect(self.Signal_push_actuator.emit)
        self.QPushButton_influence_fuction_laser.clicked.connect(self.Signal_influence_function.emit)
        self.QPushButton_set_zernike_mode.clicked.connect(self.Signal_set_zernike.emit)
        self.QPushButton_setDM.clicked.connect(self.Signal_set_dm.emit)
        self.QPushButton_update_cmd.clicked.connect(self.Signal_update_cmd.emit)
        self.QPushButton_loadDM.clicked.connect(self.dialog)
        self.QPushButton_save_dm.clicked.connect(self.Signal_save_dm.emit)
        self.QPushButton_dwfs_correction.clicked.connect(self.Signal_shwfs_correctwf.emit)
        self.QPushButton_sensorless_run.clicked.connect(self.Signal_sensorlessAO_run.emit)
        self.QPushButton_sensorless_save.clicked.connect(self.Signal_sensorlessAO_save.emit)

        self.QSpinBox_base_xcenter.setValue(983)
        self.QSpinBox_base_ycenter.setValue(1081)
        self.QSpinBox_offset_xcenter.setValue(983)
        self.QSpinBox_offset_ycenter.setValue(1081)
        self.QSpinBox_n_lenslets_x.setValue(19)
        self.QSpinBox_n_lenslets_y.setValue(18)
        self.QSpinBox_spacing.setValue(61)
        self.QSpinBox_radius.setValue(24)

    def set_wfs_base(self):
        self.Signal_shwfs_initiate.emit()
        self.QPushButton_run_wfr.setEnabled(True)

    def run_wfs(self):
        if self.QPushButton_run_wfs.isChecked():
            self.Signal_wfs_start.emit()
            self.QPushButton_shwfs_base.setEnabled(True)
            self.QPushButton_shwfs_compute_wf.setEnabled(False)
            self.QPushButton_shwfs_save_wf.setEnabled(False)
        else:
            self.Signal_wfs_stop.emit()
            self.QPushButton_shwfs_base.setEnabled(False)
            self.QPushButton_run_wfr.setEnabled(False)
            self.QPushButton_shwfs_base.setEnabled(False)

    def run_wfr(self):
        self.Signal_shwfs_run.emit()
        self.QPushButton_shwfs_compute_wf.setEnabled(True)
        self.QPushButton_shwfs_save_wf.setEnabled(True)

    def dialog(self):
        file, check = QtWidgets.QFileDialog.getOpenFileName(None, "QtWidgets.QFileDialog.getOpenFileName()", "",
                                                            "All Files (*);;Python Files (*.py);;Text Files (*.txt)")
        if check:
            print(file)
            self.Signal_load_dm.emit(file)


import sys

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = AOWidget()
    window.show()
    sys.exit(app.exec_())
